cls() // Clear the screen or console
i = 0 // Initialize loop counter

// Define constants related to the experiment
I = 6.37 // mW/cm^2, Laser intensity used in the experiment (for LRI ?)
Is = 42.7 // mW/cm^2, Saturation intensity for the atomic transition
G = 2 * 3.14 * 32e6 // rad/s, Natural linewidth (gamma) of the atomic transition (converted to angular frequency)
D = 40e6 // MHz, Detuning of the laser from the atomic resonance (for LRI its 40 MHz)
T = 1.96e-7 // s, Camera exposure time (can be retrieved with GetExposureTime function)


// Assuming r represents rc (radius of the camera lens) and R represents r_MOT (distance from MOT to lens)
r = 7.5 // mm, Radius of the camera lens (half of the lens diameter)
R = 160 // mm, Distance from the camera lens to the MOT = 2f, f=80mm

ex=GetExposureTime()

// Calculate the fraction of photons detected by the camera
fr = (r * r) / (4 * R * R) // derived from Omega/4*pi = pi*r^2/4*pi*R^2

// This fraction fr now represents the proportion of photons from the MOT that are captured by the camera lens


// Calculate the solid angle subtended by the imaging system
Solid = 4 * R * R / (r * r) // this a factor equals 1/fr, to be multiplied later to calc atom number

// Calculate the photon scattering rate per atom
P = 0.5 * G * (I / Is) / (1 + I / Is + (4 * D * D) / (G * G))

// Create a data structure for storing atom numbers (100 points)
create(#11, 100, 1) // Possibly creating a data table or array

// Loop to collect and process photon counts
while (i < 100)
    run() // Possibly triggers the camera or data acquisition

    // Retrieve total photon counts from the camera
    ph = TotalCounts(#0)

    // Apply corrections to the photon counts
    ph = ph * 0.45 // Correct for camera sensitivity, pag. 25 manual, 0.28 for 12-bit (low noise), 0.45 for 16-bit (low noise and high well capacity)
    ph = ph / 0.62 // Correct for quantum efficiency (QE) of the camera
    ph = ph / 0.89 // Correct for optical attenuation (filter, lens, window)

    // Normalize photon count by exposure time to get the photon rate
    ph = ph / ex

    // Calculate the number of atoms based on the photon rate, solid angle, and photon scattering rate
    N = ph * Solid / P

    // Store the calculated atom number in the data structure
    #11[i + 1, 1] = N

    // Calculate a scaling factor (a) for display or further analysis
    a = N / #11[i, 1]

    // Print the time, scaling factor, and atom number
    if (a > 1) then
        print(time(), 1 / a, N)
    else
        print(time(), a, N)
    endif

    // Scale the data for display purposes
    ScaleData(#11, 1000e6, 3000e6)

    // Increment the loop counter
    i = i + 1

    // Reset the counter when it reaches 100
    if (i == 100) then
        i = 0
    endif

    // Update the display or continue running
    update(1)
wend
